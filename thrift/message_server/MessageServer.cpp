// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.
#include <map>

#include <MessageService.h>
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <boost/shared_ptr.hpp>
#include <boost/thread.hpp>
#include <boost/chrono.hpp>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace ::sample;

class MessageServiceHandler :
    virtual public MessageServiceIf
{
public:
    MessageServiceHandler()
    {
    }

    void getMessage(Message& _return, const int32_t key)
    {
        _return.key = key;
        std::map<int32_t, Message>::const_iterator it = messageMap_.find(key);
        if (it != messageMap_.end())
        {
            _return.value = it->second.value;
        }
        else
        {
            _return.value = std::string();
        }
        //boost::this_thread::sleep_for(boost::chrono::milliseconds(100));
    }

    void setMessage(const Message& message)
    {
        messageMap_.insert(std::make_pair<int32_t, Message>(message.key, message));
    }

private:
    std::map<int32_t, Message> messageMap_;
};

int main(int argc, char **argv)
{
    std::string path = "/tmp/thrift-sample";
    shared_ptr<MessageServiceHandler> handler(new MessageServiceHandler());
    shared_ptr<TProcessor> processor(new MessageServiceProcessor(handler));
    shared_ptr<TServerTransport> serverTransport(new TServerSocket(path));
    shared_ptr<TTransportFactory> transportFactory(
        new TBufferedTransportFactory());
    shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

    TSimpleServer server(processor, serverTransport, transportFactory,
        protocolFactory);
    server.serve();
    return 0;
}

