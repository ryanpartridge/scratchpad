/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DirectorService_H
#define DirectorService_H

#include <thrift/TDispatchProcessor.h>
#include "control4_types.h"

namespace c4 {

class DirectorServiceIf {
 public:
  virtual ~DirectorServiceIf() {}
  virtual void getValue(std::string& _return, const int32_t id) = 0;
};

class DirectorServiceIfFactory {
 public:
  typedef DirectorServiceIf Handler;

  virtual ~DirectorServiceIfFactory() {}

  virtual DirectorServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DirectorServiceIf* /* handler */) = 0;
};

class DirectorServiceIfSingletonFactory : virtual public DirectorServiceIfFactory {
 public:
  DirectorServiceIfSingletonFactory(const boost::shared_ptr<DirectorServiceIf>& iface) : iface_(iface) {}
  virtual ~DirectorServiceIfSingletonFactory() {}

  virtual DirectorServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DirectorServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<DirectorServiceIf> iface_;
};

class DirectorServiceNull : virtual public DirectorServiceIf {
 public:
  virtual ~DirectorServiceNull() {}
  void getValue(std::string& /* _return */, const int32_t /* id */) {
    return;
  }
};

typedef struct _DirectorService_getValue_args__isset {
  _DirectorService_getValue_args__isset() : id(false) {}
  bool id :1;
} _DirectorService_getValue_args__isset;

class DirectorService_getValue_args {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  DirectorService_getValue_args(const DirectorService_getValue_args&);
  DirectorService_getValue_args& operator=(const DirectorService_getValue_args&);
  DirectorService_getValue_args() : id(0) {
  }

  virtual ~DirectorService_getValue_args() throw();
  int32_t id;

  _DirectorService_getValue_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const DirectorService_getValue_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const DirectorService_getValue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DirectorService_getValue_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DirectorService_getValue_args& obj);
};


class DirectorService_getValue_pargs {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};


  virtual ~DirectorService_getValue_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DirectorService_getValue_pargs& obj);
};

typedef struct _DirectorService_getValue_result__isset {
  _DirectorService_getValue_result__isset() : success(false) {}
  bool success :1;
} _DirectorService_getValue_result__isset;

class DirectorService_getValue_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  DirectorService_getValue_result(const DirectorService_getValue_result&);
  DirectorService_getValue_result& operator=(const DirectorService_getValue_result&);
  DirectorService_getValue_result() : success() {
  }

  virtual ~DirectorService_getValue_result() throw();
  std::string success;

  _DirectorService_getValue_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const DirectorService_getValue_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DirectorService_getValue_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DirectorService_getValue_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DirectorService_getValue_result& obj);
};

typedef struct _DirectorService_getValue_presult__isset {
  _DirectorService_getValue_presult__isset() : success(false) {}
  bool success :1;
} _DirectorService_getValue_presult__isset;

class DirectorService_getValue_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~DirectorService_getValue_presult() throw();
  std::string* success;

  _DirectorService_getValue_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const DirectorService_getValue_presult& obj);
};

class DirectorServiceClient : virtual public DirectorServiceIf {
 public:
  DirectorServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  DirectorServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getValue(std::string& _return, const int32_t id);
  void send_getValue(const int32_t id);
  void recv_getValue(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DirectorServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<DirectorServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DirectorServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getValue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DirectorServiceProcessor(boost::shared_ptr<DirectorServiceIf> iface) :
    iface_(iface) {
    processMap_["getValue"] = &DirectorServiceProcessor::process_getValue;
  }

  virtual ~DirectorServiceProcessor() {}
};

class DirectorServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DirectorServiceProcessorFactory(const ::boost::shared_ptr< DirectorServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< DirectorServiceIfFactory > handlerFactory_;
};

class DirectorServiceMultiface : virtual public DirectorServiceIf {
 public:
  DirectorServiceMultiface(std::vector<boost::shared_ptr<DirectorServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DirectorServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<DirectorServiceIf> > ifaces_;
  DirectorServiceMultiface() {}
  void add(boost::shared_ptr<DirectorServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getValue(std::string& _return, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getValue(_return, id);
    }
    ifaces_[i]->getValue(_return, id);
    return;
  }

};

} // namespace

#endif
