// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include <ComputeService.h>
#include <MessageService.h>
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TSocket.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <boost/shared_ptr.hpp>
#include <boost/make_shared.hpp>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace ::sample;

class ComputeServiceHandler :
    virtual public ComputeServiceIf
{
public:
    ComputeServiceHandler()
    {
        boost::shared_ptr<TTransport> socket = boost::make_shared<TSocket>("/tmp/thrift-sample");
        transport_ = boost::make_shared<TBufferedTransport>(socket);
        boost::shared_ptr<TProtocol> protocol = boost::make_shared<TBinaryProtocol>(transport_);
        client_ = boost::make_shared<MessageServiceClient>(protocol);
    }

    ~ComputeServiceHandler()
    {
        if (transport_->isOpen())
        {
            transport_->close();
        }
    }

    int32_t getFib(const int32_t seqNum)
    {
        int32_t num1 = 0;
        int32_t num2 = 1;
        for (int i = 0; i < seqNum - 1; ++i)
        {
            int32_t tmp = num2;
            num2 = num1 + num2;
            num1 = tmp;
        }
        return num2;
    }

    int32_t getFactorial(const int32_t base)
    {
        int32_t factorial = 1;
        for (int i = 2; i <= base; ++i)
        {
            factorial *= i;
        }
        return factorial;
    }

private:
    boost::shared_ptr<TTransport> transport_;
    boost::shared_ptr<MessageServiceClient> client_;
};

int main(int argc, char **argv)
{
    std::string path = "/tmp/thrift-sample2";
    boost::shared_ptr<ComputeServiceHandler> handler(new ComputeServiceHandler());
    boost::shared_ptr<TProcessor> processor(new ComputeServiceProcessor(handler));
    boost::shared_ptr<TServerTransport> serverTransport(new TServerSocket(path));
    boost::shared_ptr<TTransportFactory> transportFactory(
        new TBufferedTransportFactory());
    boost::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

    TSimpleServer server(processor, serverTransport, transportFactory,
        protocolFactory);
    server.serve();
    return 0;
}
