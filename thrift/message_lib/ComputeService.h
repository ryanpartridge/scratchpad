/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ComputeService_H
#define ComputeService_H

#include <thrift/TDispatchProcessor.h>
#include "sample_types.h"

namespace sample {

class ComputeServiceIf {
 public:
  virtual ~ComputeServiceIf() {}
  virtual int32_t getFib(const int32_t digits) = 0;
  virtual int32_t getFactorial(const int32_t base) = 0;
};

class ComputeServiceIfFactory {
 public:
  typedef ComputeServiceIf Handler;

  virtual ~ComputeServiceIfFactory() {}

  virtual ComputeServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ComputeServiceIf* /* handler */) = 0;
};

class ComputeServiceIfSingletonFactory : virtual public ComputeServiceIfFactory {
 public:
  ComputeServiceIfSingletonFactory(const boost::shared_ptr<ComputeServiceIf>& iface) : iface_(iface) {}
  virtual ~ComputeServiceIfSingletonFactory() {}

  virtual ComputeServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ComputeServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<ComputeServiceIf> iface_;
};

class ComputeServiceNull : virtual public ComputeServiceIf {
 public:
  virtual ~ComputeServiceNull() {}
  int32_t getFib(const int32_t /* digits */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t getFactorial(const int32_t /* base */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _ComputeService_getFib_args__isset {
  _ComputeService_getFib_args__isset() : digits(false) {}
  bool digits :1;
} _ComputeService_getFib_args__isset;

class ComputeService_getFib_args {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  ComputeService_getFib_args(const ComputeService_getFib_args&);
  ComputeService_getFib_args& operator=(const ComputeService_getFib_args&);
  ComputeService_getFib_args() : digits(0) {
  }

  virtual ~ComputeService_getFib_args() throw();
  int32_t digits;

  _ComputeService_getFib_args__isset __isset;

  void __set_digits(const int32_t val);

  bool operator == (const ComputeService_getFib_args & rhs) const
  {
    if (!(digits == rhs.digits))
      return false;
    return true;
  }
  bool operator != (const ComputeService_getFib_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ComputeService_getFib_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ComputeService_getFib_args& obj);
};


class ComputeService_getFib_pargs {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};


  virtual ~ComputeService_getFib_pargs() throw();
  const int32_t* digits;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ComputeService_getFib_pargs& obj);
};

typedef struct _ComputeService_getFib_result__isset {
  _ComputeService_getFib_result__isset() : success(false) {}
  bool success :1;
} _ComputeService_getFib_result__isset;

class ComputeService_getFib_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  ComputeService_getFib_result(const ComputeService_getFib_result&);
  ComputeService_getFib_result& operator=(const ComputeService_getFib_result&);
  ComputeService_getFib_result() : success(0) {
  }

  virtual ~ComputeService_getFib_result() throw();
  int32_t success;

  _ComputeService_getFib_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const ComputeService_getFib_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ComputeService_getFib_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ComputeService_getFib_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ComputeService_getFib_result& obj);
};

typedef struct _ComputeService_getFib_presult__isset {
  _ComputeService_getFib_presult__isset() : success(false) {}
  bool success :1;
} _ComputeService_getFib_presult__isset;

class ComputeService_getFib_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~ComputeService_getFib_presult() throw();
  int32_t* success;

  _ComputeService_getFib_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ComputeService_getFib_presult& obj);
};

typedef struct _ComputeService_getFactorial_args__isset {
  _ComputeService_getFactorial_args__isset() : base(false) {}
  bool base :1;
} _ComputeService_getFactorial_args__isset;

class ComputeService_getFactorial_args {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  ComputeService_getFactorial_args(const ComputeService_getFactorial_args&);
  ComputeService_getFactorial_args& operator=(const ComputeService_getFactorial_args&);
  ComputeService_getFactorial_args() : base(0) {
  }

  virtual ~ComputeService_getFactorial_args() throw();
  int32_t base;

  _ComputeService_getFactorial_args__isset __isset;

  void __set_base(const int32_t val);

  bool operator == (const ComputeService_getFactorial_args & rhs) const
  {
    if (!(base == rhs.base))
      return false;
    return true;
  }
  bool operator != (const ComputeService_getFactorial_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ComputeService_getFactorial_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ComputeService_getFactorial_args& obj);
};


class ComputeService_getFactorial_pargs {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};


  virtual ~ComputeService_getFactorial_pargs() throw();
  const int32_t* base;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ComputeService_getFactorial_pargs& obj);
};

typedef struct _ComputeService_getFactorial_result__isset {
  _ComputeService_getFactorial_result__isset() : success(false) {}
  bool success :1;
} _ComputeService_getFactorial_result__isset;

class ComputeService_getFactorial_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  ComputeService_getFactorial_result(const ComputeService_getFactorial_result&);
  ComputeService_getFactorial_result& operator=(const ComputeService_getFactorial_result&);
  ComputeService_getFactorial_result() : success(0) {
  }

  virtual ~ComputeService_getFactorial_result() throw();
  int32_t success;

  _ComputeService_getFactorial_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const ComputeService_getFactorial_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ComputeService_getFactorial_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ComputeService_getFactorial_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ComputeService_getFactorial_result& obj);
};

typedef struct _ComputeService_getFactorial_presult__isset {
  _ComputeService_getFactorial_presult__isset() : success(false) {}
  bool success :1;
} _ComputeService_getFactorial_presult__isset;

class ComputeService_getFactorial_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~ComputeService_getFactorial_presult() throw();
  int32_t* success;

  _ComputeService_getFactorial_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ComputeService_getFactorial_presult& obj);
};

class ComputeServiceClient : virtual public ComputeServiceIf {
 public:
  ComputeServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ComputeServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t getFib(const int32_t digits);
  void send_getFib(const int32_t digits);
  int32_t recv_getFib();
  int32_t getFactorial(const int32_t base);
  void send_getFactorial(const int32_t base);
  int32_t recv_getFactorial();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ComputeServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ComputeServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ComputeServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getFib(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getFactorial(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ComputeServiceProcessor(boost::shared_ptr<ComputeServiceIf> iface) :
    iface_(iface) {
    processMap_["getFib"] = &ComputeServiceProcessor::process_getFib;
    processMap_["getFactorial"] = &ComputeServiceProcessor::process_getFactorial;
  }

  virtual ~ComputeServiceProcessor() {}
};

class ComputeServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ComputeServiceProcessorFactory(const ::boost::shared_ptr< ComputeServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ComputeServiceIfFactory > handlerFactory_;
};

class ComputeServiceMultiface : virtual public ComputeServiceIf {
 public:
  ComputeServiceMultiface(std::vector<boost::shared_ptr<ComputeServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ComputeServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ComputeServiceIf> > ifaces_;
  ComputeServiceMultiface() {}
  void add(boost::shared_ptr<ComputeServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t getFib(const int32_t digits) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getFib(digits);
    }
    return ifaces_[i]->getFib(digits);
  }

  int32_t getFactorial(const int32_t base) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getFactorial(base);
    }
    return ifaces_[i]->getFactorial(base);
  }

};

} // namespace

#endif
